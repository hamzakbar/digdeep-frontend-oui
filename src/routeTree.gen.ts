/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ConfirmEmailRouteImport } from './routes/confirm-email'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ShareShareTokenRouteImport } from './routes/share.$shareToken'
import { Route as DownloadsFileIdRouteImport } from './routes/downloads.$fileId'
import { Route as AuthenticatedSessionsSessionIdRouteImport } from './routes/_authenticated/sessions/$sessionId'
import { Route as AuthenticatedLayoutDashboardRouteImport } from './routes/_authenticated/_layout/dashboard'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ConfirmEmailRoute = ConfirmEmailRouteImport.update({
  id: '/confirm-email',
  path: '/confirm-email',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ShareShareTokenRoute = ShareShareTokenRouteImport.update({
  id: '/share/$shareToken',
  path: '/share/$shareToken',
  getParentRoute: () => rootRouteImport,
} as any)
const DownloadsFileIdRoute = DownloadsFileIdRouteImport.update({
  id: '/downloads/$fileId',
  path: '/downloads/$fileId',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedSessionsSessionIdRoute =
  AuthenticatedSessionsSessionIdRouteImport.update({
    id: '/sessions/$sessionId',
    path: '/sessions/$sessionId',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedLayoutDashboardRoute =
  AuthenticatedLayoutDashboardRouteImport.update({
    id: '/_layout/dashboard',
    path: '/dashboard',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/confirm-email': typeof ConfirmEmailRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/downloads/$fileId': typeof DownloadsFileIdRoute
  '/share/$shareToken': typeof ShareShareTokenRoute
  '/dashboard': typeof AuthenticatedLayoutDashboardRoute
  '/sessions/$sessionId': typeof AuthenticatedSessionsSessionIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/confirm-email': typeof ConfirmEmailRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/downloads/$fileId': typeof DownloadsFileIdRoute
  '/share/$shareToken': typeof ShareShareTokenRoute
  '/dashboard': typeof AuthenticatedLayoutDashboardRoute
  '/sessions/$sessionId': typeof AuthenticatedSessionsSessionIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/confirm-email': typeof ConfirmEmailRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/downloads/$fileId': typeof DownloadsFileIdRoute
  '/share/$shareToken': typeof ShareShareTokenRoute
  '/_authenticated/_layout/dashboard': typeof AuthenticatedLayoutDashboardRoute
  '/_authenticated/sessions/$sessionId': typeof AuthenticatedSessionsSessionIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/confirm-email'
    | '/login'
    | '/signup'
    | '/downloads/$fileId'
    | '/share/$shareToken'
    | '/dashboard'
    | '/sessions/$sessionId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/confirm-email'
    | '/login'
    | '/signup'
    | '/downloads/$fileId'
    | '/share/$shareToken'
    | '/dashboard'
    | '/sessions/$sessionId'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/confirm-email'
    | '/login'
    | '/signup'
    | '/downloads/$fileId'
    | '/share/$shareToken'
    | '/_authenticated/_layout/dashboard'
    | '/_authenticated/sessions/$sessionId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  ConfirmEmailRoute: typeof ConfirmEmailRoute
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  DownloadsFileIdRoute: typeof DownloadsFileIdRoute
  ShareShareTokenRoute: typeof ShareShareTokenRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/confirm-email': {
      id: '/confirm-email'
      path: '/confirm-email'
      fullPath: '/confirm-email'
      preLoaderRoute: typeof ConfirmEmailRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/share/$shareToken': {
      id: '/share/$shareToken'
      path: '/share/$shareToken'
      fullPath: '/share/$shareToken'
      preLoaderRoute: typeof ShareShareTokenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/downloads/$fileId': {
      id: '/downloads/$fileId'
      path: '/downloads/$fileId'
      fullPath: '/downloads/$fileId'
      preLoaderRoute: typeof DownloadsFileIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/sessions/$sessionId': {
      id: '/_authenticated/sessions/$sessionId'
      path: '/sessions/$sessionId'
      fullPath: '/sessions/$sessionId'
      preLoaderRoute: typeof AuthenticatedSessionsSessionIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/_layout/dashboard': {
      id: '/_authenticated/_layout/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedLayoutDashboardRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedLayoutDashboardRoute: typeof AuthenticatedLayoutDashboardRoute
  AuthenticatedSessionsSessionIdRoute: typeof AuthenticatedSessionsSessionIdRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedLayoutDashboardRoute: AuthenticatedLayoutDashboardRoute,
  AuthenticatedSessionsSessionIdRoute: AuthenticatedSessionsSessionIdRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  ConfirmEmailRoute: ConfirmEmailRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  DownloadsFileIdRoute: DownloadsFileIdRoute,
  ShareShareTokenRoute: ShareShareTokenRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
